{"entries":[{"timestamp":1758004137736,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":133,"diffs":[[1,"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":33,"diffs":[[1,"\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":109,"length1":102,"diffs":[[1,"        \"microphone\": \"*\"\n"]]},{"start1":199,"length1":38,"diffs":[[1,"        \"README.md\"\n"]]},{"start1":226,"length1":31,"diffs":[[1,"    \"additionalFilePaths\": []\n"]]}]},{"type":"added","filename":"lnw.ts","value":"/**\n* Use this file to define custom functions and blocks.\n* Read more at https://makecode.microbit.org/blocks/custom\n*/\n\n/**\n * Motor directions\n */\nenum lnwMotor {\n    //% block=\"Forward\"\n    Forward,\n    //% block=\"Backward\"\n    Backward\n}\n\n/**\n * Turn directions\n */\nenum lnwTurn {\n    //% block=\"Left\"\n    Left,\n    //% block=\"Right\"\n    Right\n}\n\n/**\n * Spin directions\n */\nenum lnwSpin {\n    //% block=\"Left\"\n    Left,\n    //% block=\"Right\"\n    Right\n}\n\n/**\n * Servo channels\n */\nenum lnwServo {\n    //% block=\"SV1 (P9)\"\n    SV1,\n    //% block=\"SV2 (P10)\"\n    SV2,\n    //% block=\"SV3 (P11)\"\n    SV3,\n    //% block=\"SV4 (P12)\"\n    SV4\n}\n\n\n/**\n * ADC channels\n */\nenum lnwReadADC {\n    //% block=\"ADC0\"\n    ADC0 = 0,\n    //% block=\"ADC1\"\n    ADC1 = 1,\n    //% block=\"ADC2\"\n    ADC2 = 2,\n    //% block=\"ADC3\"\n    ADC3 = 3,\n    //% block=\"ADC4\"\n    ADC4 = 4,\n    //% block=\"ADC5\"\n    ADC5 = 5,\n    //% block=\"ADC6\"\n    ADC6 = 6,\n    //% block=\"ADC7\"\n    ADC7 = 7\n}\n\n/**\n * Motor channel\n */\nenum lnwMotorCH {\n    //% block=\"M1\"\n    M1,\n    //% block=\"M2\"\n    M2\n}\n/**\n * Digital pins for P0-P12\n */\nenum lnwDigitalPin {\n    //% block=\"P0\"\n    P0 = DigitalPin.P0,\n    //% block=\"P1\"\n    P1 = DigitalPin.P1,\n    //% block=\"P2\"\n    P2 = DigitalPin.P2,\n    //% block=\"P3\"\n    P3 = DigitalPin.P3,\n    //% block=\"P4\"\n    P4 = DigitalPin.P4,\n    //% block=\"P5\"\n    P5 = DigitalPin.P5,\n    //% block=\"P6\"\n    P6 = DigitalPin.P6,\n    //% block=\"P7\"\n    P7 = DigitalPin.P7,\n    //% block=\"P8\"\n    P8 = DigitalPin.P8,\n    //% block=\"P9\"\n    P9 = DigitalPin.P9,\n    //% block=\"P10\"\n    P10 = DigitalPin.P10,\n    //% block=\"P11\"\n    P11 = DigitalPin.P11,\n    //% block=\"P12\"\n    P12 = DigitalPin.P12\n}\n/**\n * Analog pins P0 - P12\n */\nenum lnwAnalogPin {\n    //% block=\"P0\"\n    P0 = AnalogPin.P0,\n    //% block=\"P1\"\n    P1 = AnalogPin.P1,\n    //% block=\"P2\"\n    P2 = AnalogPin.P2,\n    //% block=\"P3\"\n    P3 = AnalogPin.P3,\n    //% block=\"P4\"\n    P4 = AnalogPin.P4,\n    //% block=\"P5\"\n    P5 = AnalogPin.P5,\n    //% block=\"P6\"\n    P6 = AnalogPin.P6,\n    //% block=\"P7\"\n    P7 = AnalogPin.P7,\n    //% block=\"P8\"\n    P8 = AnalogPin.P8\n}\n\n/**\n * Analog write P0 - P8\n */\n//% blockNamespace=\"Analog Write\"\n//% weight=60\nenum lnwAnalogWrite {\n    //% block=\"P0\"\n    P0,\n    //% block=\"P1\"\n    P1,\n    //% block=\"P2\"\n    P2,\n    //% block=\"P3\"\n    P3,\n    //% block=\"P4\"\n    P4,\n    //% block=\"P5\"\n    P5,\n    //% block=\"P6\"\n    P6,\n    //% block=\"P7\"\n    P7,\n    //% block=\"P8\"\n    P8\n}\n\n\n/**\n* Custom motor control blocks for lnw\n*/\n//% block=\"lnw\" weight=100 color=#FF69B4 icon=\"\\uf19d\"\nnamespace lnw {\n\n    /**\n     * Control motor with analog style (-1023 to 1023)\n     * M1 = P13, P14\n     * M2 = P15, P16\n     * @param Channel Motor channel\n     * @param Speed Speed (-1023 to 1023), eg: 800\n     */\n    //% blockId=\"lnw_setMotor\" block=\"setMotor %Channel|Speed %Speed\"\n    //% Speed.min=-1023 Speed.max=1023\n    //% weight=100\n    //% group=\"Motor\"\n    export function setMotor(Channel: lnwMotorCH, Speed: number): void {\n        if (Channel == lnwMotorCH.M1) {\n            if (Speed >= 0) {\n                pins.analogWritePin(AnalogPin.P14, Speed)\n                pins.analogWritePin(AnalogPin.P13, 0)\n            } else {\n                pins.analogWritePin(AnalogPin.P14, 0)\n                pins.analogWritePin(AnalogPin.P13, -Speed)\n            }\n        }\n        else if (Channel == lnwMotorCH.M2) {\n            if (Speed >= 0) {\n                pins.analogWritePin(AnalogPin.P16, Speed)\n                pins.analogWritePin(AnalogPin.P15, 0)\n            } else {\n                pins.analogWritePin(AnalogPin.P16, 0)\n                pins.analogWritePin(AnalogPin.P15, -Speed)\n            }\n        }\n    }\n\n    /**\n     * Turn the robot by running one motor.\n     * @param Turn Direction to turn, eg: cpeTurn.Left\n     * @param speed Speed (0 to 1023), eg: 512\n     */\n    //% blockId=\"lnw_turn\" block=\"Turn %Turn|Speed %speed\"\n    //% speed.min=0 speed.max=1023\n    //% group=\"Motor\"\n    export function Turn(Turn: lnwTurn, speed: number): void {\n        if (Turn == lnwTurn.Left) {\n            setMotor(lnwMotorCH.M1, 0)     // M1 หยุด\n            setMotor(lnwMotorCH.M2, speed) // M2 หมุนไปข้างหน้า\n        } else if (Turn == lnwTurn.Right) {\n            setMotor(lnwMotorCH.M1, speed) // M1 หมุนไปข้างหน้า\n            setMotor(lnwMotorCH.M2, 0)     // M2 หยุด\n        }\n    }\n\n    /**\n     * Spin the robot in place (left or right).\n     * @param Spin Direction to spin, eg: lnwSpin.Left\n     * @param speed Speed (0 to 1023), eg: 512\n     */\n    //% blockId=\"lnw_spin\" block=\"Spin %Spin|Speed %speed\"\n    //% speed.min=0 speed.max=1023\n    //% group=\"Motor\"\n    export function Spin(Spin: lnwSpin, speed: number): void {\n        if (Spin == lnwSpin.Left) {\n            setMotor(lnwMotorCH.M1, -speed) // M1 หมุนถอยหลัง\n            setMotor(lnwMotorCH.M2, speed)  // M2 หมุนไปข้างหน้า\n        } else if (Spin == lnwSpin.Right) {\n            setMotor(lnwMotorCH.M1, speed)  // M1 หมุนไปข้างหน้า\n            setMotor(lnwMotorCH.M2, -speed) // M2 หมุนถอยหลัง\n        }\n    }\n\n    /**\n     * Stop both motors.\n     */\n    //% blockId=\"lnw_motorStop\" block=\"Motor Stop\"\n    //% group=\"Motor\"\n    export function MotorStop(): void {\n        setMotor(lnwMotorCH.M1, 0)\n        setMotor(lnwMotorCH.M2, 0)\n    }\n\n\n\n    /**\n * Control Servo 1–4 set degree between 0–180\n * @param Degree servo degree 0–180, eg: 90\n */\n    //% blockId=\"lnw_Servo\" block=\"Servo %lnwServo|Degree %Degree\"\n    //% Degree.min=0 Degree.max=180\n    //% weight=75\n    //% group=\"Servo Motor\"\n    export function Servo(Servo: lnwServo, Degree: number): void {\n        switch (Servo) {\n            case lnwServo.SV1:\n                pins.servoWritePin(AnalogPin.P9, Degree)\n                break\n            case lnwServo.SV2:\n                pins.servoWritePin(AnalogPin.P10, Degree)\n                break\n            case lnwServo.SV3:\n                pins.servoWritePin(AnalogPin.P11, Degree)\n                break\n            case lnwServo.SV4:\n                pins.servoWritePin(AnalogPin.P12, Degree)\n                break\n        }\n    }\n\n    /**\n     * Set Servo to free rotation\n     * @param Servo Servo to stop\n     */\n    //% blockId=\"lnw_ServoStop\" block=\"Servo Stop %lnwServo\"\n    //% weight=70\n    //% group=\"Servo Motor\"\n    export function ServoStop(Servo: lnwServo): void {\n        switch (Servo) {\n            case lnwServo.SV1:\n                pins.digitalWritePin(DigitalPin.P9, 0)\n                break\n            case lnwServo.SV2:\n                pins.digitalWritePin(DigitalPin.P10, 0)\n                break\n            case lnwServo.SV3:\n                pins.digitalWritePin(DigitalPin.P11, 0)\n                break\n            case lnwServo.SV4:\n                pins.digitalWritePin(DigitalPin.P12, 0)\n                break\n        }\n    }\n\n    /**\n     * Read ADC channel 0-7\n     * @param ReadADC ADC channel to read\n     */\n    //% blockId=\"lnw_readADC\" block=\"Read %lnwReadADC\"\n    //% weight=60\n    //% group=\"Analog Input/Output\"\n    export function ReadADC(ReadADC: lnwReadADC): number {\n        pins.i2cWriteNumber(72, ReadADC, NumberFormat.UInt8LE, false)\n        return pins.i2cReadNumber(72, NumberFormat.UInt16BE, false)\n    }\n    /**\n     * Write digital value to pin\n     */\n    //% blockId=\"lnw_writeDigital\" block=\"Digital Write pin %pin|value %value\"\n    //% value.min=0 value.max=1\n    //% weight=55\n    //% group=\"Digital Input/Output\"\n    export function lnw_writeDigital(pin: lnwDigitalPin, value: number): void {\n        pins.digitalWritePin(pin, value)\n    }\n\n    /**\n     * Read digital value from pin\n     */\n    //% blockId=\"lnw_readDigital\" block=\"Digital Read pin %pin\"\n    //% weight=50\n    //% group=\"Digital Input/Output\"\n    export function lnw_readDigital(pin: lnwDigitalPin): number {\n        return pins.digitalReadPin(pin)\n    }\n    /**\n * Read analog value from pin P0 - P12\n * @param pin Analog pin to read\n */\n    //% blockId=\"lnw_readAnalog\" block=\"Read analog pin %pin\"\n    //% weight=50\n    //% group=\"Analog Input/Output\"\n    export function readAnalog(pin: lnwAnalogPin): number {\n        switch (pin) {\n            case lnwAnalogPin.P0: return pins.analogReadPin(AnalogPin.P0);\n            case lnwAnalogPin.P1: return pins.analogReadPin(AnalogPin.P1);\n            case lnwAnalogPin.P2: return pins.analogReadPin(AnalogPin.P2);\n            case lnwAnalogPin.P3: return pins.analogReadPin(AnalogPin.P3);\n            case lnwAnalogPin.P4: return pins.analogReadPin(AnalogPin.P4);\n            case lnwAnalogPin.P5: return pins.analogReadPin(AnalogPin.P5);\n            case lnwAnalogPin.P6: return pins.analogReadPin(AnalogPin.P6);\n            case lnwAnalogPin.P7: return pins.analogReadPin(AnalogPin.P7);\n            case lnwAnalogPin.P8: return pins.analogReadPin(AnalogPin.P8);\n            default: return 0;\n        }\n    }\n    /**\n     * Write analog value (PWM) to pin P0 - P12\n     * @param pin Analog pin to write to\n     * @param value PWM value (0 - 1023)\n     */\n    //% blockId=\"lnw_analogWrite\" block=\"Analog write %value|to pin %pin\"\n    //% weight=49\n    //% group=\"Analog Input/Output\"\n    export function analogWrite(pin: lnwAnalogPin, value: number): void {\n        value = Math.clamp(0, 1023, value);\n        switch (pin) {\n            case lnwAnalogPin.P0: pins.analogWritePin(AnalogPin.P0, value); break;\n            case lnwAnalogPin.P1: pins.analogWritePin(AnalogPin.P1, value); break;\n            case lnwAnalogPin.P2: pins.analogWritePin(AnalogPin.P2, value); break;\n            case lnwAnalogPin.P3: pins.analogWritePin(AnalogPin.P3, value); break;\n            case lnwAnalogPin.P4: pins.analogWritePin(AnalogPin.P4, value); break;\n            case lnwAnalogPin.P5: pins.analogWritePin(AnalogPin.P5, value); break;\n            case lnwAnalogPin.P6: pins.analogWritePin(AnalogPin.P6, value); break;\n            case lnwAnalogPin.P7: pins.analogWritePin(AnalogPin.P7, value); break;\n            case lnwAnalogPin.P8: pins.analogWritePin(AnalogPin.P8, value); break;\n\n        }\n    }\n\n}\nnamespace lnw {\n    //% block=\"OLED\" weight=90 color=#FFA500 icon=\"\\uf26c\"\n    export namespace oled {\n        let addr = 0x3C\n        let initialized = false\n\n        //% block=\"initialize OLED\"\n        //% group=\"OLED\"\n        export function init(): void {\n            if (initialized) return\n            OLED12864_I2C.init(addr)\n            clear()\n            initialized = true\n        }\n\n        //% block=\"show string %text x %x y %y size %size\"\n        //% group=\"OLED\"\n        export function showString(text: string, x: number = 0, y: number = 0, size: number = 1): void {\n            if (!initialized) init()\n            OLED12864_I2C.showString(x, y, text, size)\n        }\n\n        //% block=\"show number %num x %x y %y size %size\"\n        //% group=\"OLED\"\n        export function showNumber(num: number, x: number = 0, y: number = 0, size: number = 1): void {\n            if (!initialized) init()\n            OLED12864_I2C.showString(x, y, num.toString(), size)\n        }\n\n        //% block=\"clear screen\"\n        //% group=\"OLED\"\n        export function clear(): void {\n            OLED12864_I2C.clear()\n        }\n    }\n}\n\n\n\n\n"}]},{"timestamp":1758004691484,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":320,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]},{"type":"edited","filename":"lnw.ts","patch":[{"start1":2516,"length1":55,"diffs":[[1,"//% block=\"lnw\" weight=100 color=#FF69B4 icon=\"\\uf19d\"\n"]]},{"start1":10059,"length1":59,"diffs":[[1,"    //% block=\"OLED\" weight=90 color=#FFA500 icon=\"\\uf26c\"\n"]]}]}]},{"timestamp":1758005581022,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":320,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]}]},{"timestamp":1758005584421,"editorVersion":"8.0.16","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":159,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables></variables><block type=\"device_forever\" x=\"0\" y=\"0\"></block></xml>"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":320,"length1":79,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1758004137735,"editorVersion":"8.0.16","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"lnw\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1758005612376}